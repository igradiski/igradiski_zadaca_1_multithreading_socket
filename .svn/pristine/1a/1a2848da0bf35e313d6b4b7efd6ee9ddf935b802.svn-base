package org.foi.nwtis.igradiski.zadaca_1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.foi.nwtis.igradiski.konfiguracije.Konfiguracija;
import org.foi.nwtis.igradiski.konfiguracije.KonfiguracijaApstraktna;
import org.foi.nwtis.igradiski.konfiguracije.NeispravnaKonfiguracija;
import org.foi.nwtis.igradiski.konfiguracije.NemaKonfiguracije;

public class ServerAviona {

    public static void main(String[] args) throws NemaKonfiguracije, NeispravnaKonfiguracija, FileNotFoundException, IOException {
        String sintaksa = "(ServerAviona )?(datoteka\\.((?:txt|xml|bin|json)))?( --brojDretvi ([0-9]*$))";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < args.length; i++) {
            sb.append(args[i]).append(" ");
        }
        String p = sb.toString().trim();
        Pattern pattern = Pattern.compile(sintaksa);
        Matcher m = pattern.matcher(p);
        boolean status = m.matches();
        if (status) {
            int poc = 0;
            int kraj = m.groupCount();
            for (int i = poc; i <= kraj; i++) {
                System.out.println(i + ". " + m.group(i));
            }
        } else {
            System.out.println("Ne odgovara!");
            return;
        }
        PreuzimanjeKonfiguracije(m);

    }

    private static void PreuzimanjeKonfiguracije(Matcher m) throws NemaKonfiguracije, NeispravnaKonfiguracija, FileNotFoundException, IOException {
        File f = new File(m.group(2));
        if (f.exists()) {
            Konfiguracija konfig = KonfiguracijaApstraktna.preuzmiKonfiguraciju(f.getName());
            int port = Integer.parseInt(konfig.dajPostavku("port.avioni"));
            boolean portSlobodan = ProvjeraZauzetostiPorta(port);
            if (portSlobodan) {
                ProvjeriPostojanjeDatoteka(konfig);
            } else {
                System.out.println("Port je zauzet !");
                return;
            }
        } else {
            return;
        }
    }

    private static boolean ProvjeraZauzetostiPorta(int port) {
        boolean portFree;
        try (var ignored = new ServerSocket(port)) {
            portFree = true;
            return portFree;
        } catch (IOException e) {
            portFree = false;
            return portFree;
        }
    }

    private static void ProvjeriPostojanjeDatoteka(Konfiguracija konfig) throws FileNotFoundException, IOException {
        String datotekaKorisnika = konfig.dajPostavku("datoteka.korisnika");
        String datotekaAerodrom = konfig.dajPostavku("datoteka.aerodromi");
        String datotekaAvioni = konfig.dajPostavku("datoteka.avioni");
        File korisnici = new File(datotekaKorisnika);
        File aerodromi = new File(datotekaAerodrom);
        if (korisnici.exists() && aerodromi.exists()) {
            //kreiraj objekt za kolekciju korisnika
            UcitajKorisnikeIzDatoteke(korisnici);
            // kreiraj objekt za kolekciju aerodroma
            UcitajAerodromeIzDatoteke(aerodromi);
            //provjeri postoji li datoteka sa serijaliziranim podacima datoteka.avioni
            boolean PostojiAvioniBin= ProvjeriPostojanjeDatoteke(datotekaAvioni);
            if(PostojiAvioniBin){
                //ucitaj ju samo jos ne znam kam!
            }
                
        } else {
            System.out.println("Datoteke ne postoje ili su u krivom formatu!");
            return;
        }
    }

    private static void UcitajAerodromeIzDatoteke(File aerodromi) throws FileNotFoundException {
        FileReader fr = new FileReader(aerodromi);
        BufferedReader bf = new BufferedReader(fr);
        String red;
        try {
            while ((red = bf.readLine()) != null) {
                String[] podaci = red.split(",");
                try {
                    //"icao","naziv","drzava","koordinate"
                    //"AYPY","Port Moresby Jacksons International Airport","PG","147.22000122070312, -9.4433803"
                    int duzinaStringa = podaci[4].length();
                    String icao = podaci[0];
                    String naziv = podaci[1];
                    String drzava = podaci[2];
                    String sirinaString = podaci[3].substring(1);
                    String duzinaString = podaci[4].substring(0, duzinaStringa - 1);
                    Double sirina = Double.parseDouble(sirinaString);
                    Double duzina = Double.parseDouble(duzinaString);
                    Aerodrom a = new Aerodrom(icao, naziv, drzava, sirina, duzina);
                } catch (Exception ex) {

                }
            }
            for (Aerodrom a : Aerodrom.AerodromiList) {
                //a.Ispis();
            }
        } catch (IOException ex) {
            Logger.getLogger(ServerAviona.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static void UcitajKorisnikeIzDatoteke(File korisnici) throws FileNotFoundException, IOException {
        ArrayList<String> korisniciString = new ArrayList<>();
        FileReader fr = new FileReader(korisnici);
        BufferedReader bf = new BufferedReader(fr);
        StringBuilder sb = new StringBuilder();
        String line = bf.readLine();
        while( line != null){
            if(line.contains("key=")){
                //sb.append(line).append("\n");
                korisniciString.add(line);
            }
            line = bf.readLine();
        }  
        DohvatiUsernamePassword(korisniciString);
    }

    private static void DohvatiUsernamePassword(ArrayList<String> korisniciString) {
        String[]polje;
       for(String korisnik : korisniciString){
           polje= korisnik.split(">");
           String korisnickoIme = polje[0].substring(12,polje[0].length()-1);
           String lozinka= polje[1].substring(0, polje[1].length()-7);
           Korisnik k = new Korisnik(korisnickoIme, lozinka);
       }
       
    }

    private static boolean ProvjeriPostojanjeDatoteke(String datotekaAvioni) {
        File f = new File(datotekaAvioni);
        if (f.exists()) {
            return true;
        } else {
            System.out.println("Datoteka ne postoji!");
            return false;
        }
    }

}
